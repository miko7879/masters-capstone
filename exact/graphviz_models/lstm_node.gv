digraph CNN {
	{
		rank = source;
        prev_cell   [shape=box,color=blue,label="prev cell"];
        input       [shape=box,color=blue,label="input"];
	}

    w_input     [shape=diamond,color=blue,label="W_input"];
    w_cell      [shape=diamond,color=blue,label="W_cell"];
    w_output    [shape=diamond,color=blue,label="W_output"];
    w_forget    [shape=diamond,color=blue,label="W_forget"];
    u_input     [shape=diamond,color=blue,label="U_input"];
    u_output    [shape=diamond,color=blue,label="U_output"];
    u_forget    [shape=diamond,color=blue,label="U_forget"];
    b_input     [shape=diamond,color=blue,label="B_input"];
    b_cell      [shape=diamond,color=blue,label="B_cell"];
    b_output    [shape=diamond,color=blue,label="B_output"];
    b_forget    [shape=diamond,color=blue,label="B_forget"];

    #input gate
    input_mul [shape=circle,color=blue,label="*"];

    w_input -> input_mul;
    input -> input_mul;

    input_gate_mul [shape=circle,color=blue,label="*"];

    u_input -> input_gate_mul;
    prev_cell -> input_gate_mul;


    input_add [shape=circle,color=blue,label="+"];
    //input_sigmoid [shape=circle,color=red,label="sigmoid"];
    input_sigmoid [shape=circle,color=red,label="&sigma;"];
    input_mul -> input_add;
    input_gate_mul -> input_add;
    b_input -> input_add;

    input_add -> input_sigmoid;
    input_gate [shape=box,color=green,label="input gate"];
    input_sigmoid -> input_gate;

    #output gate
    output_mul [shape=circle,color=blue,label="*"];

    w_output -> output_mul;
    input -> output_mul;

    output_gate_mul [shape=circle,color=blue,label="*"];

    u_output -> output_gate_mul;
    prev_cell -> output_gate_mul;


    output_add [shape=circle,color=blue,label="+"];
    //output_sigmoid [shape=circle,color=red,label="sigmoid"];
    output_sigmoid [shape=circle,color=red,label="&sigma;"];
    output_mul -> output_add;
    output_gate_mul -> output_add;
    b_output -> output_add;

    output_add -> output_sigmoid;

    output_gate [shape=box,color=green,label="output gate"];
    output_sigmoid -> output_gate;

    #forget gate
    forget_mul [shape=circle,color=blue,label="*"];

    w_forget -> forget_mul;
    input -> forget_mul;

    forget_gate_mul [shape=circle,color=blue,label="*"];

    u_forget -> forget_gate_mul;
    prev_cell -> forget_gate_mul;


    forget_add [shape=circle,color=blue,label="+"];
    //forget_sigmoid [shape=circle,color=red,label="sigmoid"];
    forget_sigmoid [shape=circle,color=red,label="&sigma;"];
    forget_mul -> forget_add;
    forget_gate_mul -> forget_add;
    b_forget -> forget_add;

    forget_add -> forget_sigmoid;
    forget_gate [shape=box,color=green,label="forget gate"];
    forget_sigmoid -> forget_gate;



    cell_forget_mul [shape=circle,color=blue,label="*"];
    forget_gate -> cell_forget_mul;
    prev_cell -> cell_forget_mul;

    cell_inner_tanh_mul [shape=circle,color=blue,label="*"];
    w_cell -> cell_inner_tanh_mul;
    input -> cell_inner_tanh_mul;

    cell_inner_tanh_add [shape=circle,color=blue,label="+"];

    cell_inner_tanh_mul -> cell_inner_tanh_add;
    b_cell ->cell_inner_tanh_add;

    cell_tanh [shape=circle,color=orange,label="tanh"];
    cell_inner_tanh_add -> cell_tanh;

    cell_outer_tanh_mul [shape=circle,color=blue,label="*"];
    input_gate -> cell_outer_tanh_mul;
    cell_tanh -> cell_outer_tanh_mul;

    cell_add [shape=circle,color=blue,label="+"];
    cell_forget_mul -> cell_add;
    cell_outer_tanh_mul -> cell_add;

    cell [shape=box,color=green,label="cell"];
    cell_add -> cell;
    cell->prev_cell;

//    output_tanh [shape=circle,color=orange,label="tanh"];
    output_tanh [shape=circle,color=orange,label="identity"];
    cell -> output_tanh;

    final_output_mul [shape=circle,color=blue,label="*"];
    output_tanh -> final_output_mul;
    output_gate -> final_output_mul;


	{
		rank = sink;

        legend [shape=box,
            label=<
                <table>
                <tr><td>f = &sigma;(W_f*x + U_f*c_prev + f_bias)</td></tr>
                <tr><td>i = &sigma;(W_i*x + U_i*c_prev + i_bias)</td></tr>
                <tr><td>o = &sigma;(W_o*x + U_o*c_prev + o_bias)</td></tr>


                <tr><td>c = f * c_prev + i * tanh(W_c*x + c_bias)</td></tr>
                <tr><td>h = o * c</td></tr>
                </table>
                >]

		output [shape=circle,color=blue,label="output"];
	}

    final_output_mul -> output;

}
